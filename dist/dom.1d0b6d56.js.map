{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","textContent","innerText","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    create(string){\r\n        /*container 容器 template可以容纳任何标签*/\r\n        const container = document.createElement(\"template\");\r\n        /*string.trim()表示把字符串前面的空格消除掉 */\r\n        container.innerHTML = string.trim();\r\n        /*返回容器内的第一个孩子 */\r\n        return container.content.firstChild;\r\n    },\r\n    after(node,node2){\r\n        /*找到节点的父亲把节点2放到节点1的下一个节点的前面，也就是节点2放到节点1的后面 */\r\n        node.parentNode.insertBefore(node2,node.nextSibling);\r\n    },\r\n    before(node,node2){\r\n        /*同上,把节点2放到节点1的前面 */\r\n        node.parentNode.insertBefore(node2,node);\r\n    },\r\n    append(parent,node){\r\n        /*父节点后添加子节点 */\r\n        parent.appendChild(node);\r\n    },\r\n    wrap(node,parent){ /*创造父节点 */\r\n        /*这里犯过错,这里调用的是新增各个接口,我们只是把node和parent赋值过去,内部还是把parent放到node的前面*/\r\n        dom.before(node,parent);\r\n        // console.log(parent);\r\n        dom.append(parent,node);\r\n    },\r\n    remove(node){\r\n        /*找到节点的父亲然后删除他的子节点 */\r\n        node.parentNode.removeChild(node);\r\n        //这里return的作用是返回被移除对象,然后通过let div=dom.remove(div),获取到被删除的元素\r\n        return node;\r\n    },\r\n    empty(node){ /*移除这个节点下的所有子节点 */\r\n        /*高级语法(解构赋值)类比：const childNodes = node.childNodes; 获取节点所有的子节点 */\r\n        // const {childNodes} = node;\r\n\r\n        const array = [];\r\n        let x = node.firstChild;\r\n        while(x){\r\n            array.push(dom.remove(node.firstChild));\r\n            //这里重新赋值时因为第一个子节点已经移除，这里已经是后面的子节点了\r\n            x=node.firstChild;\r\n        }\r\n\r\n        // for(let i = 0;i<childNodes.length;i++){\r\n        //     //这里不能用childNodes,它会实时更新,所以长度会实时变化\r\n        //     dom.remove(childNodes[i]);\r\n        //     //删除掉所有节点,想把删除的节点放到数组中保留\r\n        //     array.push(childNodes[i]);\r\n        // }\r\n        // //返回数组,通过数组在把删除掉的子节点拿到\r\n\r\n        return array;\r\n    },\r\n    attr(node,name,value){   //根据参数个数写不同的方法叫重载\r\n        if(arguments.length === 3){\r\n            //如果长度等于3，那么就修改值\r\n            node.setAttribute(name,value);\r\n        }else if(arguments.length ===2){\r\n            //如果长度=2,就获取值\r\n            return node.getAttribute(name);\r\n        }\r\n    },\r\n    //arguments获取函数传递值的个数\r\n    text(node,string){  //修改文本内容  根据不同的情况选用不同的方法就叫做：适配\r\n        if(arguments.length===2){  //2个修改文本\r\n            if('innerText' in node){ //看innerText方法在node里面吗\r\n                node.innerHTML = string;\r\n            }else{\r\n                node.textContent = string;\r\n            }\r\n        }else if(arguments.length===1){  //1个读取文本\r\n            if('innerText' in node){\r\n                return node.innerText;\r\n            }else{\r\n                return node.textContent;\r\n            }\r\n        }\r\n        \r\n    },\r\n    html(node,string){ //重载\r\n        if(arguments === 2){\r\n            node.innerHTML = string;\r\n        }else if(arguments ===1){\r\n            return node.innerHTML;\r\n        }\r\n    },\r\n    style(node,name,value){\r\n        if(arguments.length===3){\r\n            //dom.style(div,'color','red')  修改单个值\r\n            node.style[name] = value; \r\n        }else if(arguments ===2){\r\n            //dom.style(div,'color')  读取值\r\n            return node.style[name];\r\n        }else if(name instanceof Object){ //如果name值属于对象\r\n            //div.style(div,{color:'red'})\r\n            const object = name;\r\n            for(let key in object){  //如果key(color)值在name{color:'red'}里\r\n                node.style[key] = object[key]; //节点的样式style的key值就替换成object里的key值  修改多个值 键值对  \r\n            }\r\n        }\r\n    },\r\n    class:{\r\n        add(node,className){\r\n            node.classList.add(className);\r\n        },\r\n        remove(node,className){\r\n            node.classList.remove(className);\r\n        },\r\n        has(node,className){ //判断这个类值是否在这个类里\r\n            return node.classList.contains(className);\r\n        }\r\n    },\r\n    on(node,eventName,fn){ //附着节点监听\r\n        node.addEventListener(eventName,fn);\r\n    },\r\n    off(node,eventName,fn){ //移除节点监听\r\n        node,removeEventListener(eventName,fn);\r\n    },\r\n\r\n    //查\r\n    find(selector,scope){ //查找某个元素在特定的id里吗？，如果不在就去document文本里找\r\n        let x = (scope || document).querySelectorAll(selector);\r\n    },\r\n    parent(node){\r\n        return node.parentNode;\r\n    },\r\n    children(node){\r\n        return node.children;\r\n    },\r\n    siblings(node){\r\n        //把node的子节点转换成数组然后遍历除自己外的所有子节点\r\n        //filter函数表示过滤器，元素过滤掉自己\r\n        return Array.from(node.parentNode.children).filter(n=>n!=node);\r\n    },\r\n    next(node){\r\n        let x = node.nextSibling; //nextSibling表示node后面的数\r\n        while(x.nodeType ===3){ //DOM里nodeType的3表示文本，如果是文本（空格回车）就下一个子元素\r\n            x = x.nextSibling;\r\n        }\r\n        return x;\r\n    },\r\n    previous(node){\r\n        let x = node.previousSibling; //表示node节点的上一个数\r\n        while(x && x.nodeType === 3){ //如果x存在，且不是空格回车等\r\n            x = x.previousSibling;\r\n        }\r\n        return x;\r\n    },\r\n    each(nodeList,fn){\r\n        for(let i=0;i<nodeList.length;i++){\r\n            fn.call(null,nodeList[i]); //null传的是this\r\n        }\r\n    },\r\n    index(node){\r\n        const list = dom.children(node.parentNode);\r\n        let i;\r\n        for(i=0;i<list.length;i++){\r\n            if(list[i] === node){\r\n                break;\r\n            }\r\n        }\r\n        return i;\r\n    }\r\n    \r\n};\r\n"]}